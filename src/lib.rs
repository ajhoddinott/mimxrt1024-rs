#![doc = "Peripheral access API for MIMXRT1024 microcontrollers (generated using svd2rust v0.27.2 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.27.2/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = "Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn DMA0_DMA16();
    fn DMA1_DMA17();
    fn DMA2_DMA18();
    fn DMA3_DMA19();
    fn DMA4_DMA20();
    fn DMA5_DMA21();
    fn DMA6_DMA22();
    fn DMA7_DMA23();
    fn DMA8_DMA24();
    fn DMA9_DMA25();
    fn DMA10_DMA26();
    fn DMA11_DMA27();
    fn DMA12_DMA28();
    fn DMA13_DMA29();
    fn DMA14_DMA30();
    fn DMA15_DMA31();
    fn DMA_ERROR();
    fn CTI0_ERROR();
    fn CTI1_ERROR();
    fn CORE();
    fn LPUART1();
    fn LPUART2();
    fn LPUART3();
    fn LPUART4();
    fn LPUART5();
    fn LPUART6();
    fn LPUART7();
    fn LPUART8();
    fn LPI2C1();
    fn LPI2C2();
    fn LPI2C3();
    fn LPI2C4();
    fn LPSPI1();
    fn LPSPI2();
    fn LPSPI3();
    fn LPSPI4();
    fn CAN1();
    fn CAN2();
    fn FLEXRAM();
    fn KPP();
    fn RESERVED56();
    fn GPR_IRQ();
    fn RESERVED58();
    fn RESERVED59();
    fn RESERVED60();
    fn WDOG2();
    fn SNVS_HP_WRAPPER();
    fn SNVS_HP_WRAPPER_TZ();
    fn SNVS_LP_HP_WRAPPER();
    fn CSU();
    fn DCP();
    fn DCP_VMI();
    fn RESERVED68();
    fn TRNG();
    fn BEE();
    fn SAI1();
    fn SAI2();
    fn SAI3_RX();
    fn SAI3_TX();
    fn SPDIF();
    fn PMU();
    fn RESERVED78();
    fn TEMP_LOW_HIGH();
    fn TEMP_PANIC();
    fn USB_PHY();
    fn RESERVED82();
    fn ADC1();
    fn ADC2();
    fn DCDC();
    fn RESERVED86();
    fn RESERVED87();
    fn GPIO1_INT0();
    fn GPIO1_INT1();
    fn GPIO1_INT2();
    fn GPIO1_INT3();
    fn GPIO1_INT4();
    fn GPIO1_INT5();
    fn GPIO1_INT6();
    fn GPIO1_INT7();
    fn GPIO1_COMBINED_0_15();
    fn GPIO1_COMBINED_16_31();
    fn GPIO2_COMBINED_0_15();
    fn GPIO2_COMBINED_16_31();
    fn GPIO3_COMBINED_0_15();
    fn GPIO3_COMBINED_16_31();
    fn RESERVED102();
    fn RESERVED103();
    fn GPIO5_COMBINED_0_15();
    fn GPIO5_COMBINED_16_31();
    fn FLEXIO1();
    fn RESERVED107();
    fn WDOG1();
    fn RTWDOG();
    fn EWM();
    fn CCM_1();
    fn CCM_2();
    fn GPC();
    fn SRC();
    fn RESERVED115();
    fn GPT1();
    fn GPT2();
    fn PWM1_0();
    fn PWM1_1();
    fn PWM1_2();
    fn PWM1_3();
    fn PWM1_FAULT();
    fn RESERVED123();
    fn FLEXSPI();
    fn SEMC();
    fn USDHC1();
    fn USDHC2();
    fn RESERVED128();
    fn USB_OTG1();
    fn ENET();
    fn ENET_1588_TIMER();
    fn XBAR1_IRQ_0_1();
    fn XBAR1_IRQ_2_3();
    fn ADC_ETC_IRQ0();
    fn ADC_ETC_IRQ1();
    fn ADC_ETC_IRQ2();
    fn ADC_ETC_ERROR_IRQ();
    fn PIT();
    fn ACMP1();
    fn ACMP2();
    fn ACMP3();
    fn ACMP4();
    fn RESERVED143();
    fn RESERVED144();
    fn ENC1();
    fn ENC2();
    fn RESERVED147();
    fn RESERVED148();
    fn TMR1();
    fn TMR2();
    fn RESERVED151();
    fn RESERVED152();
    fn PWM2_0();
    fn PWM2_1();
    fn PWM2_2();
    fn PWM2_3();
    fn PWM2_FAULT();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 142] = [
    Vector {
        _handler: DMA0_DMA16,
    },
    Vector {
        _handler: DMA1_DMA17,
    },
    Vector {
        _handler: DMA2_DMA18,
    },
    Vector {
        _handler: DMA3_DMA19,
    },
    Vector {
        _handler: DMA4_DMA20,
    },
    Vector {
        _handler: DMA5_DMA21,
    },
    Vector {
        _handler: DMA6_DMA22,
    },
    Vector {
        _handler: DMA7_DMA23,
    },
    Vector {
        _handler: DMA8_DMA24,
    },
    Vector {
        _handler: DMA9_DMA25,
    },
    Vector {
        _handler: DMA10_DMA26,
    },
    Vector {
        _handler: DMA11_DMA27,
    },
    Vector {
        _handler: DMA12_DMA28,
    },
    Vector {
        _handler: DMA13_DMA29,
    },
    Vector {
        _handler: DMA14_DMA30,
    },
    Vector {
        _handler: DMA15_DMA31,
    },
    Vector {
        _handler: DMA_ERROR,
    },
    Vector {
        _handler: CTI0_ERROR,
    },
    Vector {
        _handler: CTI1_ERROR,
    },
    Vector { _handler: CORE },
    Vector { _handler: LPUART1 },
    Vector { _handler: LPUART2 },
    Vector { _handler: LPUART3 },
    Vector { _handler: LPUART4 },
    Vector { _handler: LPUART5 },
    Vector { _handler: LPUART6 },
    Vector { _handler: LPUART7 },
    Vector { _handler: LPUART8 },
    Vector { _handler: LPI2C1 },
    Vector { _handler: LPI2C2 },
    Vector { _handler: LPI2C3 },
    Vector { _handler: LPI2C4 },
    Vector { _handler: LPSPI1 },
    Vector { _handler: LPSPI2 },
    Vector { _handler: LPSPI3 },
    Vector { _handler: LPSPI4 },
    Vector { _handler: CAN1 },
    Vector { _handler: CAN2 },
    Vector { _handler: FLEXRAM },
    Vector { _handler: KPP },
    Vector {
        _handler: RESERVED56,
    },
    Vector { _handler: GPR_IRQ },
    Vector {
        _handler: RESERVED58,
    },
    Vector {
        _handler: RESERVED59,
    },
    Vector {
        _handler: RESERVED60,
    },
    Vector { _handler: WDOG2 },
    Vector {
        _handler: SNVS_HP_WRAPPER,
    },
    Vector {
        _handler: SNVS_HP_WRAPPER_TZ,
    },
    Vector {
        _handler: SNVS_LP_HP_WRAPPER,
    },
    Vector { _handler: CSU },
    Vector { _handler: DCP },
    Vector { _handler: DCP_VMI },
    Vector {
        _handler: RESERVED68,
    },
    Vector { _handler: TRNG },
    Vector { _reserved: 0 },
    Vector { _handler: BEE },
    Vector { _handler: SAI1 },
    Vector { _handler: SAI2 },
    Vector { _handler: SAI3_RX },
    Vector { _handler: SAI3_TX },
    Vector { _handler: SPDIF },
    Vector { _handler: PMU },
    Vector {
        _handler: RESERVED78,
    },
    Vector {
        _handler: TEMP_LOW_HIGH,
    },
    Vector {
        _handler: TEMP_PANIC,
    },
    Vector { _handler: USB_PHY },
    Vector {
        _handler: RESERVED82,
    },
    Vector { _handler: ADC1 },
    Vector { _handler: ADC2 },
    Vector { _handler: DCDC },
    Vector {
        _handler: RESERVED86,
    },
    Vector {
        _handler: RESERVED87,
    },
    Vector {
        _handler: GPIO1_INT0,
    },
    Vector {
        _handler: GPIO1_INT1,
    },
    Vector {
        _handler: GPIO1_INT2,
    },
    Vector {
        _handler: GPIO1_INT3,
    },
    Vector {
        _handler: GPIO1_INT4,
    },
    Vector {
        _handler: GPIO1_INT5,
    },
    Vector {
        _handler: GPIO1_INT6,
    },
    Vector {
        _handler: GPIO1_INT7,
    },
    Vector {
        _handler: GPIO1_COMBINED_0_15,
    },
    Vector {
        _handler: GPIO1_COMBINED_16_31,
    },
    Vector {
        _handler: GPIO2_COMBINED_0_15,
    },
    Vector {
        _handler: GPIO2_COMBINED_16_31,
    },
    Vector {
        _handler: GPIO3_COMBINED_0_15,
    },
    Vector {
        _handler: GPIO3_COMBINED_16_31,
    },
    Vector {
        _handler: RESERVED102,
    },
    Vector {
        _handler: RESERVED103,
    },
    Vector {
        _handler: GPIO5_COMBINED_0_15,
    },
    Vector {
        _handler: GPIO5_COMBINED_16_31,
    },
    Vector { _handler: FLEXIO1 },
    Vector {
        _handler: RESERVED107,
    },
    Vector { _handler: WDOG1 },
    Vector { _handler: RTWDOG },
    Vector { _handler: EWM },
    Vector { _handler: CCM_1 },
    Vector { _handler: CCM_2 },
    Vector { _handler: GPC },
    Vector { _handler: SRC },
    Vector {
        _handler: RESERVED115,
    },
    Vector { _handler: GPT1 },
    Vector { _handler: GPT2 },
    Vector { _handler: PWM1_0 },
    Vector { _handler: PWM1_1 },
    Vector { _handler: PWM1_2 },
    Vector { _handler: PWM1_3 },
    Vector {
        _handler: PWM1_FAULT,
    },
    Vector {
        _handler: RESERVED123,
    },
    Vector { _handler: FLEXSPI },
    Vector { _handler: SEMC },
    Vector { _handler: USDHC1 },
    Vector { _handler: USDHC2 },
    Vector {
        _handler: RESERVED128,
    },
    Vector { _handler: USB_OTG1 },
    Vector { _handler: ENET },
    Vector {
        _handler: ENET_1588_TIMER,
    },
    Vector {
        _handler: XBAR1_IRQ_0_1,
    },
    Vector {
        _handler: XBAR1_IRQ_2_3,
    },
    Vector {
        _handler: ADC_ETC_IRQ0,
    },
    Vector {
        _handler: ADC_ETC_IRQ1,
    },
    Vector {
        _handler: ADC_ETC_IRQ2,
    },
    Vector {
        _handler: ADC_ETC_ERROR_IRQ,
    },
    Vector { _handler: PIT },
    Vector { _handler: ACMP1 },
    Vector { _handler: ACMP2 },
    Vector { _handler: ACMP3 },
    Vector { _handler: ACMP4 },
    Vector {
        _handler: RESERVED143,
    },
    Vector {
        _handler: RESERVED144,
    },
    Vector { _handler: ENC1 },
    Vector { _handler: ENC2 },
    Vector {
        _handler: RESERVED147,
    },
    Vector {
        _handler: RESERVED148,
    },
    Vector { _handler: TMR1 },
    Vector { _handler: TMR2 },
    Vector {
        _handler: RESERVED151,
    },
    Vector {
        _handler: RESERVED152,
    },
    Vector { _handler: PWM2_0 },
    Vector { _handler: PWM2_1 },
    Vector { _handler: PWM2_2 },
    Vector { _handler: PWM2_3 },
    Vector {
        _handler: PWM2_FAULT,
    },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - DMA0_DMA16"]
    DMA0_DMA16 = 0,
    #[doc = "1 - DMA1_DMA17"]
    DMA1_DMA17 = 1,
    #[doc = "2 - DMA2_DMA18"]
    DMA2_DMA18 = 2,
    #[doc = "3 - DMA3_DMA19"]
    DMA3_DMA19 = 3,
    #[doc = "4 - DMA4_DMA20"]
    DMA4_DMA20 = 4,
    #[doc = "5 - DMA5_DMA21"]
    DMA5_DMA21 = 5,
    #[doc = "6 - DMA6_DMA22"]
    DMA6_DMA22 = 6,
    #[doc = "7 - DMA7_DMA23"]
    DMA7_DMA23 = 7,
    #[doc = "8 - DMA8_DMA24"]
    DMA8_DMA24 = 8,
    #[doc = "9 - DMA9_DMA25"]
    DMA9_DMA25 = 9,
    #[doc = "10 - DMA10_DMA26"]
    DMA10_DMA26 = 10,
    #[doc = "11 - DMA11_DMA27"]
    DMA11_DMA27 = 11,
    #[doc = "12 - DMA12_DMA28"]
    DMA12_DMA28 = 12,
    #[doc = "13 - DMA13_DMA29"]
    DMA13_DMA29 = 13,
    #[doc = "14 - DMA14_DMA30"]
    DMA14_DMA30 = 14,
    #[doc = "15 - DMA15_DMA31"]
    DMA15_DMA31 = 15,
    #[doc = "16 - DMA_ERROR"]
    DMA_ERROR = 16,
    #[doc = "17 - CTI0_ERROR"]
    CTI0_ERROR = 17,
    #[doc = "18 - CTI1_ERROR"]
    CTI1_ERROR = 18,
    #[doc = "19 - CORE"]
    CORE = 19,
    #[doc = "20 - LPUART1"]
    LPUART1 = 20,
    #[doc = "21 - LPUART2"]
    LPUART2 = 21,
    #[doc = "22 - LPUART3"]
    LPUART3 = 22,
    #[doc = "23 - LPUART4"]
    LPUART4 = 23,
    #[doc = "24 - LPUART5"]
    LPUART5 = 24,
    #[doc = "25 - LPUART6"]
    LPUART6 = 25,
    #[doc = "26 - LPUART7"]
    LPUART7 = 26,
    #[doc = "27 - LPUART8"]
    LPUART8 = 27,
    #[doc = "28 - LPI2C1"]
    LPI2C1 = 28,
    #[doc = "29 - LPI2C2"]
    LPI2C2 = 29,
    #[doc = "30 - LPI2C3"]
    LPI2C3 = 30,
    #[doc = "31 - LPI2C4"]
    LPI2C4 = 31,
    #[doc = "32 - LPSPI1"]
    LPSPI1 = 32,
    #[doc = "33 - LPSPI2"]
    LPSPI2 = 33,
    #[doc = "34 - LPSPI3"]
    LPSPI3 = 34,
    #[doc = "35 - LPSPI4"]
    LPSPI4 = 35,
    #[doc = "36 - CAN1"]
    CAN1 = 36,
    #[doc = "37 - CAN2"]
    CAN2 = 37,
    #[doc = "38 - FLEXRAM"]
    FLEXRAM = 38,
    #[doc = "39 - KPP"]
    KPP = 39,
    #[doc = "40 - Reserved56"]
    RESERVED56 = 40,
    #[doc = "41 - GPR_IRQ"]
    GPR_IRQ = 41,
    #[doc = "42 - Reserved58"]
    RESERVED58 = 42,
    #[doc = "43 - Reserved59"]
    RESERVED59 = 43,
    #[doc = "44 - Reserved60"]
    RESERVED60 = 44,
    #[doc = "45 - WDOG2"]
    WDOG2 = 45,
    #[doc = "46 - SNVS_HP_WRAPPER"]
    SNVS_HP_WRAPPER = 46,
    #[doc = "47 - SNVS_HP_WRAPPER_TZ"]
    SNVS_HP_WRAPPER_TZ = 47,
    #[doc = "48 - SNVS_LP_HP_WRAPPER"]
    SNVS_LP_HP_WRAPPER = 48,
    #[doc = "49 - CSU"]
    CSU = 49,
    #[doc = "50 - DCP"]
    DCP = 50,
    #[doc = "51 - DCP_VMI"]
    DCP_VMI = 51,
    #[doc = "52 - Reserved68"]
    RESERVED68 = 52,
    #[doc = "53 - TRNG"]
    TRNG = 53,
    #[doc = "55 - BEE"]
    BEE = 55,
    #[doc = "56 - SAI1"]
    SAI1 = 56,
    #[doc = "57 - SAI2"]
    SAI2 = 57,
    #[doc = "58 - SAI3_RX"]
    SAI3_RX = 58,
    #[doc = "59 - SAI3_TX"]
    SAI3_TX = 59,
    #[doc = "60 - SPDIF"]
    SPDIF = 60,
    #[doc = "61 - PMU"]
    PMU = 61,
    #[doc = "62 - Reserved78"]
    RESERVED78 = 62,
    #[doc = "63 - TEMP_LOW_HIGH"]
    TEMP_LOW_HIGH = 63,
    #[doc = "64 - TEMP_PANIC"]
    TEMP_PANIC = 64,
    #[doc = "65 - USB_PHY"]
    USB_PHY = 65,
    #[doc = "66 - Reserved82"]
    RESERVED82 = 66,
    #[doc = "67 - ADC1"]
    ADC1 = 67,
    #[doc = "68 - ADC2"]
    ADC2 = 68,
    #[doc = "69 - DCDC"]
    DCDC = 69,
    #[doc = "70 - Reserved86"]
    RESERVED86 = 70,
    #[doc = "71 - Reserved87"]
    RESERVED87 = 71,
    #[doc = "72 - GPIO1_INT0"]
    GPIO1_INT0 = 72,
    #[doc = "73 - GPIO1_INT1"]
    GPIO1_INT1 = 73,
    #[doc = "74 - GPIO1_INT2"]
    GPIO1_INT2 = 74,
    #[doc = "75 - GPIO1_INT3"]
    GPIO1_INT3 = 75,
    #[doc = "76 - GPIO1_INT4"]
    GPIO1_INT4 = 76,
    #[doc = "77 - GPIO1_INT5"]
    GPIO1_INT5 = 77,
    #[doc = "78 - GPIO1_INT6"]
    GPIO1_INT6 = 78,
    #[doc = "79 - GPIO1_INT7"]
    GPIO1_INT7 = 79,
    #[doc = "80 - GPIO1_Combined_0_15"]
    GPIO1_COMBINED_0_15 = 80,
    #[doc = "81 - GPIO1_Combined_16_31"]
    GPIO1_COMBINED_16_31 = 81,
    #[doc = "82 - GPIO2_Combined_0_15"]
    GPIO2_COMBINED_0_15 = 82,
    #[doc = "83 - GPIO2_Combined_16_31"]
    GPIO2_COMBINED_16_31 = 83,
    #[doc = "84 - GPIO3_Combined_0_15"]
    GPIO3_COMBINED_0_15 = 84,
    #[doc = "85 - GPIO3_Combined_16_31"]
    GPIO3_COMBINED_16_31 = 85,
    #[doc = "86 - Reserved102"]
    RESERVED102 = 86,
    #[doc = "87 - Reserved103"]
    RESERVED103 = 87,
    #[doc = "88 - GPIO5_Combined_0_15"]
    GPIO5_COMBINED_0_15 = 88,
    #[doc = "89 - GPIO5_Combined_16_31"]
    GPIO5_COMBINED_16_31 = 89,
    #[doc = "90 - FLEXIO1"]
    FLEXIO1 = 90,
    #[doc = "91 - Reserved107"]
    RESERVED107 = 91,
    #[doc = "92 - WDOG1"]
    WDOG1 = 92,
    #[doc = "93 - RTWDOG"]
    RTWDOG = 93,
    #[doc = "94 - EWM"]
    EWM = 94,
    #[doc = "95 - CCM_1"]
    CCM_1 = 95,
    #[doc = "96 - CCM_2"]
    CCM_2 = 96,
    #[doc = "97 - GPC"]
    GPC = 97,
    #[doc = "98 - SRC"]
    SRC = 98,
    #[doc = "99 - Reserved115"]
    RESERVED115 = 99,
    #[doc = "100 - GPT1"]
    GPT1 = 100,
    #[doc = "101 - GPT2"]
    GPT2 = 101,
    #[doc = "102 - PWM1_0"]
    PWM1_0 = 102,
    #[doc = "103 - PWM1_1"]
    PWM1_1 = 103,
    #[doc = "104 - PWM1_2"]
    PWM1_2 = 104,
    #[doc = "105 - PWM1_3"]
    PWM1_3 = 105,
    #[doc = "106 - PWM1_FAULT"]
    PWM1_FAULT = 106,
    #[doc = "107 - Reserved123"]
    RESERVED123 = 107,
    #[doc = "108 - FLEXSPI"]
    FLEXSPI = 108,
    #[doc = "109 - SEMC"]
    SEMC = 109,
    #[doc = "110 - USDHC1"]
    USDHC1 = 110,
    #[doc = "111 - USDHC2"]
    USDHC2 = 111,
    #[doc = "112 - Reserved128"]
    RESERVED128 = 112,
    #[doc = "113 - USB_OTG1"]
    USB_OTG1 = 113,
    #[doc = "114 - ENET"]
    ENET = 114,
    #[doc = "115 - ENET_1588_Timer"]
    ENET_1588_TIMER = 115,
    #[doc = "116 - XBAR1_IRQ_0_1"]
    XBAR1_IRQ_0_1 = 116,
    #[doc = "117 - XBAR1_IRQ_2_3"]
    XBAR1_IRQ_2_3 = 117,
    #[doc = "118 - ADC_ETC_IRQ0"]
    ADC_ETC_IRQ0 = 118,
    #[doc = "119 - ADC_ETC_IRQ1"]
    ADC_ETC_IRQ1 = 119,
    #[doc = "120 - ADC_ETC_IRQ2"]
    ADC_ETC_IRQ2 = 120,
    #[doc = "121 - ADC_ETC_ERROR_IRQ"]
    ADC_ETC_ERROR_IRQ = 121,
    #[doc = "122 - PIT"]
    PIT = 122,
    #[doc = "123 - ACMP1"]
    ACMP1 = 123,
    #[doc = "124 - ACMP2"]
    ACMP2 = 124,
    #[doc = "125 - ACMP3"]
    ACMP3 = 125,
    #[doc = "126 - ACMP4"]
    ACMP4 = 126,
    #[doc = "127 - Reserved143"]
    RESERVED143 = 127,
    #[doc = "128 - Reserved144"]
    RESERVED144 = 128,
    #[doc = "129 - ENC1"]
    ENC1 = 129,
    #[doc = "130 - ENC2"]
    ENC2 = 130,
    #[doc = "131 - Reserved147"]
    RESERVED147 = 131,
    #[doc = "132 - Reserved148"]
    RESERVED148 = 132,
    #[doc = "133 - TMR1"]
    TMR1 = 133,
    #[doc = "134 - TMR2"]
    TMR2 = 134,
    #[doc = "135 - Reserved151"]
    RESERVED151 = 135,
    #[doc = "136 - Reserved152"]
    RESERVED152 = 136,
    #[doc = "137 - PWM2_0"]
    PWM2_0 = 137,
    #[doc = "138 - PWM2_1"]
    PWM2_1 = 138,
    #[doc = "139 - PWM2_2"]
    PWM2_2 = 139,
    #[doc = "140 - PWM2_3"]
    PWM2_3 = 140,
    #[doc = "141 - PWM2_FAULT"]
    PWM2_FAULT = 141,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "AIPSTZ Control Registers"]
pub struct AIPSTZ1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AIPSTZ1 {}
impl AIPSTZ1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const aipstz1::RegisterBlock = 0x4007_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aipstz1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AIPSTZ1 {
    type Target = aipstz1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AIPSTZ1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AIPSTZ1").finish()
    }
}
#[doc = "AIPSTZ Control Registers"]
pub mod aipstz1;
#[doc = "AIPSTZ Control Registers"]
pub struct AIPSTZ2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AIPSTZ2 {}
impl AIPSTZ2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const aipstz1::RegisterBlock = 0x4017_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aipstz1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AIPSTZ2 {
    type Target = aipstz1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AIPSTZ2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AIPSTZ2").finish()
    }
}
#[doc = "AIPSTZ Control Registers"]
pub use self::aipstz1 as aipstz2;
#[doc = "AIPSTZ Control Registers"]
pub struct AIPSTZ3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AIPSTZ3 {}
impl AIPSTZ3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const aipstz1::RegisterBlock = 0x4027_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aipstz1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AIPSTZ3 {
    type Target = aipstz1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AIPSTZ3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AIPSTZ3").finish()
    }
}
#[doc = "AIPSTZ Control Registers"]
pub use self::aipstz1 as aipstz3;
#[doc = "AIPSTZ Control Registers"]
pub struct AIPSTZ4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AIPSTZ4 {}
impl AIPSTZ4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const aipstz1::RegisterBlock = 0x4037_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aipstz1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AIPSTZ4 {
    type Target = aipstz1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AIPSTZ4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AIPSTZ4").finish()
    }
}
#[doc = "AIPSTZ Control Registers"]
pub use self::aipstz1 as aipstz4;
#[doc = "DCDC"]
pub struct DCDC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DCDC {}
impl DCDC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dcdc::RegisterBlock = 0x4008_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dcdc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DCDC {
    type Target = dcdc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DCDC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCDC").finish()
    }
}
#[doc = "DCDC"]
pub mod dcdc;
#[doc = "PIT"]
pub struct PIT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PIT {}
impl PIT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pit::RegisterBlock = 0x4008_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pit::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PIT {
    type Target = pit::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PIT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PIT").finish()
    }
}
#[doc = "PIT"]
pub mod pit;
#[doc = "High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)"]
pub struct CMP1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CMP1 {}
impl CMP1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cmp1::RegisterBlock = 0x4009_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cmp1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CMP1 {
    type Target = cmp1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CMP1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CMP1").finish()
    }
}
#[doc = "High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)"]
pub mod cmp1;
#[doc = "High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)"]
pub struct CMP2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CMP2 {}
impl CMP2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cmp1::RegisterBlock = 0x4009_4008 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cmp1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CMP2 {
    type Target = cmp1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CMP2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CMP2").finish()
    }
}
#[doc = "High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)"]
pub use self::cmp1 as cmp2;
#[doc = "High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)"]
pub struct CMP3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CMP3 {}
impl CMP3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cmp1::RegisterBlock = 0x4009_4010 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cmp1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CMP3 {
    type Target = cmp1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CMP3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CMP3").finish()
    }
}
#[doc = "High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)"]
pub use self::cmp1 as cmp3;
#[doc = "High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)"]
pub struct CMP4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CMP4 {}
impl CMP4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cmp1::RegisterBlock = 0x4009_4018 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cmp1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CMP4 {
    type Target = cmp1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CMP4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CMP4").finish()
    }
}
#[doc = "High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)"]
pub use self::cmp1 as cmp4;
#[doc = "IOMUXC"]
pub struct IOMUXC_SNVS_GPR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IOMUXC_SNVS_GPR {}
impl IOMUXC_SNVS_GPR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iomuxc_snvs_gpr::RegisterBlock = 0x400a_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iomuxc_snvs_gpr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IOMUXC_SNVS_GPR {
    type Target = iomuxc_snvs_gpr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IOMUXC_SNVS_GPR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IOMUXC_SNVS_GPR").finish()
    }
}
#[doc = "IOMUXC"]
pub mod iomuxc_snvs_gpr;
#[doc = "IOMUXC_SNVS"]
pub struct IOMUXC_SNVS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IOMUXC_SNVS {}
impl IOMUXC_SNVS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iomuxc_snvs::RegisterBlock = 0x400a_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iomuxc_snvs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IOMUXC_SNVS {
    type Target = iomuxc_snvs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IOMUXC_SNVS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IOMUXC_SNVS").finish()
    }
}
#[doc = "IOMUXC_SNVS"]
pub mod iomuxc_snvs;
#[doc = "IOMUXC_GPR"]
pub struct IOMUXC_GPR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IOMUXC_GPR {}
impl IOMUXC_GPR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iomuxc_gpr::RegisterBlock = 0x400a_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iomuxc_gpr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IOMUXC_GPR {
    type Target = iomuxc_gpr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IOMUXC_GPR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IOMUXC_GPR").finish()
    }
}
#[doc = "IOMUXC_GPR"]
pub mod iomuxc_gpr;
#[doc = "FLEXRAM"]
pub struct FLEXRAM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLEXRAM {}
impl FLEXRAM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const flexram::RegisterBlock = 0x400b_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flexram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLEXRAM {
    type Target = flexram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLEXRAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLEXRAM").finish()
    }
}
#[doc = "FLEXRAM"]
pub mod flexram;
#[doc = "EWM"]
pub struct EWM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EWM {}
impl EWM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ewm::RegisterBlock = 0x400b_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ewm::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EWM {
    type Target = ewm::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EWM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EWM").finish()
    }
}
#[doc = "EWM"]
pub mod ewm;
#[doc = "WDOG"]
pub struct WDOG1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDOG1 {}
impl WDOG1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdog1::RegisterBlock = 0x400b_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdog1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDOG1 {
    type Target = wdog1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDOG1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDOG1").finish()
    }
}
#[doc = "WDOG"]
pub mod wdog1;
#[doc = "WDOG"]
pub struct WDOG2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDOG2 {}
impl WDOG2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdog1::RegisterBlock = 0x400d_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdog1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDOG2 {
    type Target = wdog1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDOG2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDOG2").finish()
    }
}
#[doc = "WDOG"]
pub use self::wdog1 as wdog2;
#[doc = "WDOG"]
pub struct RTWDOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTWDOG {}
impl RTWDOG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtwdog::RegisterBlock = 0x400b_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtwdog::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTWDOG {
    type Target = rtwdog::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTWDOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTWDOG").finish()
    }
}
#[doc = "WDOG"]
pub mod rtwdog;
#[doc = "Analog-to-Digital Converter"]
pub struct ADC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC1 {}
impl ADC1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc1::RegisterBlock = 0x400c_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC1 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub mod adc1;
#[doc = "Analog-to-Digital Converter"]
pub struct ADC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC2 {}
impl ADC2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc1::RegisterBlock = 0x400c_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC2 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc1 as adc2;
#[doc = "TRNG"]
pub struct TRNG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TRNG {}
impl TRNG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const trng::RegisterBlock = 0x400c_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const trng::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TRNG {
    type Target = trng::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TRNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TRNG").finish()
    }
}
#[doc = "TRNG"]
pub mod trng;
#[doc = "SNVS"]
pub struct SNVS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SNVS {}
impl SNVS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const snvs::RegisterBlock = 0x400d_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const snvs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SNVS {
    type Target = snvs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SNVS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SNVS").finish()
    }
}
#[doc = "SNVS"]
pub mod snvs;
#[doc = "CCM_ANALOG"]
pub struct CCM_ANALOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CCM_ANALOG {}
impl CCM_ANALOG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ccm_analog::RegisterBlock = 0x400d_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ccm_analog::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CCM_ANALOG {
    type Target = ccm_analog::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CCM_ANALOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CCM_ANALOG").finish()
    }
}
#[doc = "CCM_ANALOG"]
pub mod ccm_analog;
#[doc = "PMU"]
pub struct PMU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PMU {}
impl PMU {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pmu::RegisterBlock = 0x400d_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pmu::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PMU {
    type Target = pmu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PMU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PMU").finish()
    }
}
#[doc = "PMU"]
pub mod pmu;
#[doc = "Temperature Monitor"]
pub struct TEMPMON {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TEMPMON {}
impl TEMPMON {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tempmon::RegisterBlock = 0x400d_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tempmon::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TEMPMON {
    type Target = tempmon::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TEMPMON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TEMPMON").finish()
    }
}
#[doc = "Temperature Monitor"]
pub mod tempmon;
#[doc = "USB Analog"]
pub struct USB_ANALOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB_ANALOG {}
impl USB_ANALOG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb_analog::RegisterBlock = 0x400d_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb_analog::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB_ANALOG {
    type Target = usb_analog::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB_ANALOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_ANALOG").finish()
    }
}
#[doc = "USB Analog"]
pub mod usb_analog;
#[doc = "XTALOSC24M"]
pub struct XTALOSC24M {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for XTALOSC24M {}
impl XTALOSC24M {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const xtalosc24m::RegisterBlock = 0x400d_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const xtalosc24m::RegisterBlock {
        Self::PTR
    }
}
impl Deref for XTALOSC24M {
    type Target = xtalosc24m::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for XTALOSC24M {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XTALOSC24M").finish()
    }
}
#[doc = "XTALOSC24M"]
pub mod xtalosc24m;
#[doc = "USBPHY Register Reference Index"]
pub struct USBPHY {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USBPHY {}
impl USBPHY {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usbphy::RegisterBlock = 0x400d_9000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usbphy::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USBPHY {
    type Target = usbphy::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USBPHY {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USBPHY").finish()
    }
}
#[doc = "USBPHY Register Reference Index"]
pub mod usbphy;
#[doc = "CSU registers"]
pub struct CSU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CSU {}
impl CSU {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const csu::RegisterBlock = 0x400d_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const csu::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CSU {
    type Target = csu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CSU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CSU").finish()
    }
}
#[doc = "CSU registers"]
pub mod csu;
#[doc = "DMA"]
pub struct DMA0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA0 {}
impl DMA0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dma0::RegisterBlock = 0x400e_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMA0 {
    type Target = dma0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMA0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA0").finish()
    }
}
#[doc = "DMA"]
pub mod dma0;
#[doc = "DMAMUX"]
pub struct DMAMUX {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMAMUX {}
impl DMAMUX {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dmamux::RegisterBlock = 0x400e_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dmamux::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMAMUX {
    type Target = dmamux::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMAMUX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMAMUX").finish()
    }
}
#[doc = "DMAMUX"]
pub mod dmamux;
#[doc = "GPC"]
pub struct GPC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPC {}
impl GPC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpc::RegisterBlock = 0x400f_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPC {
    type Target = gpc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPC").finish()
    }
}
#[doc = "GPC"]
pub mod gpc;
#[doc = "PGC"]
pub struct PGC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PGC {}
impl PGC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pgc::RegisterBlock = 0x400f_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pgc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PGC {
    type Target = pgc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PGC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PGC").finish()
    }
}
#[doc = "PGC"]
pub mod pgc;
#[doc = "SRC"]
pub struct SRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SRC {}
impl SRC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const src::RegisterBlock = 0x400f_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const src::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SRC {
    type Target = src::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SRC").finish()
    }
}
#[doc = "SRC"]
pub mod src;
#[doc = "CCM"]
pub struct CCM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CCM {}
impl CCM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ccm::RegisterBlock = 0x400f_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ccm::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CCM {
    type Target = ccm::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CCM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CCM").finish()
    }
}
#[doc = "CCM"]
pub mod ccm;
#[doc = "LPUART"]
pub struct LPUART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART1 {}
impl LPUART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart1::RegisterBlock = 0x4018_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART1 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
#[doc = "LPUART"]
pub mod lpuart1;
#[doc = "LPUART"]
pub struct LPUART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART2 {}
impl LPUART2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart1::RegisterBlock = 0x4018_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART2 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART2").finish()
    }
}
#[doc = "LPUART"]
pub use self::lpuart1 as lpuart2;
#[doc = "LPUART"]
pub struct LPUART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART3 {}
impl LPUART3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart1::RegisterBlock = 0x4018_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART3 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART3").finish()
    }
}
#[doc = "LPUART"]
pub use self::lpuart1 as lpuart3;
#[doc = "LPUART"]
pub struct LPUART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART4 {}
impl LPUART4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart1::RegisterBlock = 0x4019_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART4 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART4").finish()
    }
}
#[doc = "LPUART"]
pub use self::lpuart1 as lpuart4;
#[doc = "LPUART"]
pub struct LPUART5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART5 {}
impl LPUART5 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart1::RegisterBlock = 0x4019_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART5 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART5").finish()
    }
}
#[doc = "LPUART"]
pub use self::lpuart1 as lpuart5;
#[doc = "LPUART"]
pub struct LPUART6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART6 {}
impl LPUART6 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart1::RegisterBlock = 0x4019_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART6 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART6").finish()
    }
}
#[doc = "LPUART"]
pub use self::lpuart1 as lpuart6;
#[doc = "LPUART"]
pub struct LPUART7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART7 {}
impl LPUART7 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart1::RegisterBlock = 0x4019_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART7 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART7").finish()
    }
}
#[doc = "LPUART"]
pub use self::lpuart1 as lpuart7;
#[doc = "LPUART"]
pub struct LPUART8 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART8 {}
impl LPUART8 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart1::RegisterBlock = 0x401a_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART8 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART8").finish()
    }
}
#[doc = "LPUART"]
pub use self::lpuart1 as lpuart8;
#[doc = "FLEXIO"]
pub struct FLEXIO1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLEXIO1 {}
impl FLEXIO1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const flexio1::RegisterBlock = 0x401a_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flexio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLEXIO1 {
    type Target = flexio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLEXIO1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLEXIO1").finish()
    }
}
#[doc = "FLEXIO"]
pub mod flexio1;
#[doc = "GPIO"]
pub struct GPIO1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO1 {}
impl GPIO1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio1::RegisterBlock = 0x401b_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO1 {
    type Target = gpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO1").finish()
    }
}
#[doc = "GPIO"]
pub mod gpio1;
#[doc = "GPIO"]
pub struct GPIO5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO5 {}
impl GPIO5 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio1::RegisterBlock = 0x400c_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO5 {
    type Target = gpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO5").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpio1 as gpio5;
#[doc = "GPIO"]
pub struct GPIO2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO2 {}
impl GPIO2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio1::RegisterBlock = 0x401b_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO2 {
    type Target = gpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO2").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpio1 as gpio2;
#[doc = "GPIO"]
pub struct GPIO3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO3 {}
impl GPIO3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio1::RegisterBlock = 0x401c_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO3 {
    type Target = gpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO3").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpio1 as gpio3;
#[doc = "FLEXCAN"]
pub struct CAN1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAN1 {}
impl CAN1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can1::RegisterBlock = 0x401d_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAN1 {
    type Target = can1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN1").finish()
    }
}
#[doc = "FLEXCAN"]
pub mod can1;
#[doc = "FLEXCAN"]
pub struct CAN2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAN2 {}
impl CAN2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can1::RegisterBlock = 0x401d_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAN2 {
    type Target = can1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN2").finish()
    }
}
#[doc = "FLEXCAN"]
pub use self::can1 as can2;
#[doc = "TMR"]
pub struct TMR1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TMR1 {}
impl TMR1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tmr1::RegisterBlock = 0x401d_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tmr1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TMR1 {
    type Target = tmr1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TMR1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR1").finish()
    }
}
#[doc = "TMR"]
pub mod tmr1;
#[doc = "TMR"]
pub struct TMR2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TMR2 {}
impl TMR2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tmr1::RegisterBlock = 0x401e_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tmr1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TMR2 {
    type Target = tmr1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TMR2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR2").finish()
    }
}
#[doc = "TMR"]
pub use self::tmr1 as tmr2;
#[doc = "GPT"]
pub struct GPT1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPT1 {}
impl GPT1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpt1::RegisterBlock = 0x401e_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpt1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPT1 {
    type Target = gpt1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPT1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPT1").finish()
    }
}
#[doc = "GPT"]
pub mod gpt1;
#[doc = "GPT"]
pub struct GPT2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPT2 {}
impl GPT2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpt1::RegisterBlock = 0x401f_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpt1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPT2 {
    type Target = gpt1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPT2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPT2").finish()
    }
}
#[doc = "GPT"]
pub use self::gpt1 as gpt2;
#[doc = "no description available"]
pub struct OCOTP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OCOTP {}
impl OCOTP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ocotp::RegisterBlock = 0x401f_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ocotp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OCOTP {
    type Target = ocotp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OCOTP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCOTP").finish()
    }
}
#[doc = "no description available"]
pub mod ocotp;
#[doc = "IOMUXC"]
pub struct IOMUXC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IOMUXC {}
impl IOMUXC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iomuxc::RegisterBlock = 0x401f_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iomuxc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IOMUXC {
    type Target = iomuxc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IOMUXC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IOMUXC").finish()
    }
}
#[doc = "IOMUXC"]
pub mod iomuxc;
#[doc = "KPP Registers"]
pub struct KPP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for KPP {}
impl KPP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const kpp::RegisterBlock = 0x401f_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const kpp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for KPP {
    type Target = kpp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for KPP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("KPP").finish()
    }
}
#[doc = "KPP Registers"]
pub mod kpp;
#[doc = "FlexSPI"]
pub struct FLEXSPI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLEXSPI {}
impl FLEXSPI {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const flexspi::RegisterBlock = 0x402a_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flexspi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLEXSPI {
    type Target = flexspi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLEXSPI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLEXSPI").finish()
    }
}
#[doc = "FlexSPI"]
pub mod flexspi;
#[doc = "uSDHC"]
pub struct USDHC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USDHC1 {}
impl USDHC1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usdhc1::RegisterBlock = 0x402c_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usdhc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USDHC1 {
    type Target = usdhc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USDHC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USDHC1").finish()
    }
}
#[doc = "uSDHC"]
pub mod usdhc1;
#[doc = "uSDHC"]
pub struct USDHC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USDHC2 {}
impl USDHC2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usdhc1::RegisterBlock = 0x402c_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usdhc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USDHC2 {
    type Target = usdhc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USDHC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USDHC2").finish()
    }
}
#[doc = "uSDHC"]
pub use self::usdhc1 as usdhc2;
#[doc = "ENET"]
pub struct ENET {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ENET {}
impl ENET {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const enet::RegisterBlock = 0x402d_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const enet::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ENET {
    type Target = enet::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ENET {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ENET").finish()
    }
}
#[doc = "ENET"]
pub mod enet;
#[doc = "USB"]
pub struct USB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB {}
impl USB {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb::RegisterBlock = 0x402e_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB {
    type Target = usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB").finish()
    }
}
#[doc = "USB"]
pub mod usb;
#[doc = "USB"]
pub struct USBNC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USBNC {}
impl USBNC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usbnc::RegisterBlock = 0x402e_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usbnc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USBNC {
    type Target = usbnc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USBNC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USBNC").finish()
    }
}
#[doc = "USB"]
pub mod usbnc;
#[doc = "SEMC"]
pub struct SEMC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEMC {}
impl SEMC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const semc::RegisterBlock = 0x402f_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const semc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEMC {
    type Target = semc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEMC").finish()
    }
}
#[doc = "SEMC"]
pub mod semc;
#[doc = "DCP register reference index"]
pub struct DCP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DCP {}
impl DCP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dcp::RegisterBlock = 0x402f_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dcp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DCP {
    type Target = dcp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DCP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCP").finish()
    }
}
#[doc = "DCP register reference index"]
pub mod dcp;
#[doc = "SPDIF"]
pub struct SPDIF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPDIF {}
impl SPDIF {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spdif::RegisterBlock = 0x4038_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spdif::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPDIF {
    type Target = spdif::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPDIF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPDIF").finish()
    }
}
#[doc = "SPDIF"]
pub mod spdif;
#[doc = "SAI"]
pub struct SAI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SAI1 {}
impl SAI1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sai1::RegisterBlock = 0x4038_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SAI1 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI1").finish()
    }
}
#[doc = "SAI"]
pub mod sai1;
#[doc = "SAI"]
pub struct SAI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SAI2 {}
impl SAI2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sai2::RegisterBlock = 0x4038_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sai2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SAI2 {
    type Target = sai2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI2").finish()
    }
}
#[doc = "SAI"]
pub mod sai2;
#[doc = "SAI"]
pub struct SAI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SAI3 {}
impl SAI3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sai2::RegisterBlock = 0x4038_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sai2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SAI3 {
    type Target = sai2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SAI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI3").finish()
    }
}
#[doc = "SAI"]
pub use self::sai2 as sai3;
#[doc = "LPSPI"]
pub struct LPSPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPSPI1 {}
impl LPSPI1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpspi1::RegisterBlock = 0x4039_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpspi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPSPI1 {
    type Target = lpspi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPSPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPSPI1").finish()
    }
}
#[doc = "LPSPI"]
pub mod lpspi1;
#[doc = "LPSPI"]
pub struct LPSPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPSPI2 {}
impl LPSPI2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpspi1::RegisterBlock = 0x4039_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpspi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPSPI2 {
    type Target = lpspi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPSPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPSPI2").finish()
    }
}
#[doc = "LPSPI"]
pub use self::lpspi1 as lpspi2;
#[doc = "LPSPI"]
pub struct LPSPI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPSPI3 {}
impl LPSPI3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpspi1::RegisterBlock = 0x4039_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpspi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPSPI3 {
    type Target = lpspi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPSPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPSPI3").finish()
    }
}
#[doc = "LPSPI"]
pub use self::lpspi1 as lpspi3;
#[doc = "LPSPI"]
pub struct LPSPI4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPSPI4 {}
impl LPSPI4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpspi1::RegisterBlock = 0x403a_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpspi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPSPI4 {
    type Target = lpspi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPSPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPSPI4").finish()
    }
}
#[doc = "LPSPI"]
pub use self::lpspi1 as lpspi4;
#[doc = "ADC_ETC"]
pub struct ADC_ETC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC_ETC {}
impl ADC_ETC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc_etc::RegisterBlock = 0x403b_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc_etc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC_ETC {
    type Target = adc_etc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC_ETC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC_ETC").finish()
    }
}
#[doc = "ADC_ETC"]
pub mod adc_etc;
#[doc = "AND/OR/INVERT module"]
pub struct AOI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AOI {}
impl AOI {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const aoi::RegisterBlock = 0x403b_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aoi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AOI {
    type Target = aoi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AOI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AOI").finish()
    }
}
#[doc = "AND/OR/INVERT module"]
pub mod aoi;
#[doc = "Crossbar Switch"]
pub struct XBARA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for XBARA {}
impl XBARA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const xbara::RegisterBlock = 0x403b_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const xbara::RegisterBlock {
        Self::PTR
    }
}
impl Deref for XBARA {
    type Target = xbara::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for XBARA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XBARA").finish()
    }
}
#[doc = "Crossbar Switch"]
pub mod xbara;
#[doc = "Crossbar Switch"]
pub struct XBARB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for XBARB {}
impl XBARB {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const xbarb::RegisterBlock = 0x403c_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const xbarb::RegisterBlock {
        Self::PTR
    }
}
impl Deref for XBARB {
    type Target = xbarb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for XBARB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XBARB").finish()
    }
}
#[doc = "Crossbar Switch"]
pub mod xbarb;
#[doc = "QDC"]
pub struct ENC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ENC1 {}
impl ENC1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const enc1::RegisterBlock = 0x403c_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const enc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ENC1 {
    type Target = enc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ENC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ENC1").finish()
    }
}
#[doc = "QDC"]
pub mod enc1;
#[doc = "QDC"]
pub struct ENC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ENC2 {}
impl ENC2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const enc1::RegisterBlock = 0x403c_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const enc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ENC2 {
    type Target = enc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ENC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ENC2").finish()
    }
}
#[doc = "QDC"]
pub use self::enc1 as enc2;
#[doc = "PWM"]
pub struct PWM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWM1 {}
impl PWM1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm1::RegisterBlock = 0x403d_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWM1 {
    type Target = pwm1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWM1").finish()
    }
}
#[doc = "PWM"]
pub mod pwm1;
#[doc = "PWM"]
pub struct PWM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWM2 {}
impl PWM2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm1::RegisterBlock = 0x403e_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWM2 {
    type Target = pwm1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWM2").finish()
    }
}
#[doc = "PWM"]
pub use self::pwm1 as pwm2;
#[doc = "Bus Encryption Engine"]
pub struct BEE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BEE {}
impl BEE {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bee::RegisterBlock = 0x403e_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bee::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BEE {
    type Target = bee::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BEE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BEE").finish()
    }
}
#[doc = "Bus Encryption Engine"]
pub mod bee;
#[doc = "LPI2C"]
pub struct LPI2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPI2C1 {}
impl LPI2C1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpi2c1::RegisterBlock = 0x403f_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpi2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPI2C1 {
    type Target = lpi2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPI2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPI2C1").finish()
    }
}
#[doc = "LPI2C"]
pub mod lpi2c1;
#[doc = "LPI2C"]
pub struct LPI2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPI2C2 {}
impl LPI2C2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpi2c1::RegisterBlock = 0x403f_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpi2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPI2C2 {
    type Target = lpi2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPI2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPI2C2").finish()
    }
}
#[doc = "LPI2C"]
pub use self::lpi2c1 as lpi2c2;
#[doc = "LPI2C"]
pub struct LPI2C3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPI2C3 {}
impl LPI2C3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpi2c1::RegisterBlock = 0x403f_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpi2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPI2C3 {
    type Target = lpi2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPI2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPI2C3").finish()
    }
}
#[doc = "LPI2C"]
pub use self::lpi2c1 as lpi2c3;
#[doc = "LPI2C"]
pub struct LPI2C4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPI2C4 {}
impl LPI2C4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpi2c1::RegisterBlock = 0x403f_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpi2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPI2C4 {
    type Target = lpi2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPI2C4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPI2C4").finish()
    }
}
#[doc = "LPI2C"]
pub use self::lpi2c1 as lpi2c4;
#[doc = "System Control Block"]
pub struct SYSTEM_CONTROL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSTEM_CONTROL {}
impl SYSTEM_CONTROL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const system_control::RegisterBlock = 0xe000_e000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const system_control::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSTEM_CONTROL {
    type Target = system_control::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSTEM_CONTROL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSTEM_CONTROL").finish()
    }
}
#[doc = "System Control Block"]
pub mod system_control;
#[doc = "CM7_MCM"]
pub struct CM7_MCM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CM7_MCM {}
impl CM7_MCM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cm7_mcm::RegisterBlock = 0xe008_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cm7_mcm::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CM7_MCM {
    type Target = cm7_mcm::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CM7_MCM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CM7_MCM").finish()
    }
}
#[doc = "CM7_MCM"]
pub mod cm7_mcm;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "AIPSTZ1"]
    pub AIPSTZ1: AIPSTZ1,
    #[doc = "AIPSTZ2"]
    pub AIPSTZ2: AIPSTZ2,
    #[doc = "AIPSTZ3"]
    pub AIPSTZ3: AIPSTZ3,
    #[doc = "AIPSTZ4"]
    pub AIPSTZ4: AIPSTZ4,
    #[doc = "DCDC"]
    pub DCDC: DCDC,
    #[doc = "PIT"]
    pub PIT: PIT,
    #[doc = "CMP1"]
    pub CMP1: CMP1,
    #[doc = "CMP2"]
    pub CMP2: CMP2,
    #[doc = "CMP3"]
    pub CMP3: CMP3,
    #[doc = "CMP4"]
    pub CMP4: CMP4,
    #[doc = "IOMUXC_SNVS_GPR"]
    pub IOMUXC_SNVS_GPR: IOMUXC_SNVS_GPR,
    #[doc = "IOMUXC_SNVS"]
    pub IOMUXC_SNVS: IOMUXC_SNVS,
    #[doc = "IOMUXC_GPR"]
    pub IOMUXC_GPR: IOMUXC_GPR,
    #[doc = "FLEXRAM"]
    pub FLEXRAM: FLEXRAM,
    #[doc = "EWM"]
    pub EWM: EWM,
    #[doc = "WDOG1"]
    pub WDOG1: WDOG1,
    #[doc = "WDOG2"]
    pub WDOG2: WDOG2,
    #[doc = "RTWDOG"]
    pub RTWDOG: RTWDOG,
    #[doc = "ADC1"]
    pub ADC1: ADC1,
    #[doc = "ADC2"]
    pub ADC2: ADC2,
    #[doc = "TRNG"]
    pub TRNG: TRNG,
    #[doc = "SNVS"]
    pub SNVS: SNVS,
    #[doc = "CCM_ANALOG"]
    pub CCM_ANALOG: CCM_ANALOG,
    #[doc = "PMU"]
    pub PMU: PMU,
    #[doc = "TEMPMON"]
    pub TEMPMON: TEMPMON,
    #[doc = "USB_ANALOG"]
    pub USB_ANALOG: USB_ANALOG,
    #[doc = "XTALOSC24M"]
    pub XTALOSC24M: XTALOSC24M,
    #[doc = "USBPHY"]
    pub USBPHY: USBPHY,
    #[doc = "CSU"]
    pub CSU: CSU,
    #[doc = "DMA0"]
    pub DMA0: DMA0,
    #[doc = "DMAMUX"]
    pub DMAMUX: DMAMUX,
    #[doc = "GPC"]
    pub GPC: GPC,
    #[doc = "PGC"]
    pub PGC: PGC,
    #[doc = "SRC"]
    pub SRC: SRC,
    #[doc = "CCM"]
    pub CCM: CCM,
    #[doc = "LPUART1"]
    pub LPUART1: LPUART1,
    #[doc = "LPUART2"]
    pub LPUART2: LPUART2,
    #[doc = "LPUART3"]
    pub LPUART3: LPUART3,
    #[doc = "LPUART4"]
    pub LPUART4: LPUART4,
    #[doc = "LPUART5"]
    pub LPUART5: LPUART5,
    #[doc = "LPUART6"]
    pub LPUART6: LPUART6,
    #[doc = "LPUART7"]
    pub LPUART7: LPUART7,
    #[doc = "LPUART8"]
    pub LPUART8: LPUART8,
    #[doc = "FLEXIO1"]
    pub FLEXIO1: FLEXIO1,
    #[doc = "GPIO1"]
    pub GPIO1: GPIO1,
    #[doc = "GPIO5"]
    pub GPIO5: GPIO5,
    #[doc = "GPIO2"]
    pub GPIO2: GPIO2,
    #[doc = "GPIO3"]
    pub GPIO3: GPIO3,
    #[doc = "CAN1"]
    pub CAN1: CAN1,
    #[doc = "CAN2"]
    pub CAN2: CAN2,
    #[doc = "TMR1"]
    pub TMR1: TMR1,
    #[doc = "TMR2"]
    pub TMR2: TMR2,
    #[doc = "GPT1"]
    pub GPT1: GPT1,
    #[doc = "GPT2"]
    pub GPT2: GPT2,
    #[doc = "OCOTP"]
    pub OCOTP: OCOTP,
    #[doc = "IOMUXC"]
    pub IOMUXC: IOMUXC,
    #[doc = "KPP"]
    pub KPP: KPP,
    #[doc = "FLEXSPI"]
    pub FLEXSPI: FLEXSPI,
    #[doc = "USDHC1"]
    pub USDHC1: USDHC1,
    #[doc = "USDHC2"]
    pub USDHC2: USDHC2,
    #[doc = "ENET"]
    pub ENET: ENET,
    #[doc = "USB"]
    pub USB: USB,
    #[doc = "USBNC"]
    pub USBNC: USBNC,
    #[doc = "SEMC"]
    pub SEMC: SEMC,
    #[doc = "DCP"]
    pub DCP: DCP,
    #[doc = "SPDIF"]
    pub SPDIF: SPDIF,
    #[doc = "SAI1"]
    pub SAI1: SAI1,
    #[doc = "SAI2"]
    pub SAI2: SAI2,
    #[doc = "SAI3"]
    pub SAI3: SAI3,
    #[doc = "LPSPI1"]
    pub LPSPI1: LPSPI1,
    #[doc = "LPSPI2"]
    pub LPSPI2: LPSPI2,
    #[doc = "LPSPI3"]
    pub LPSPI3: LPSPI3,
    #[doc = "LPSPI4"]
    pub LPSPI4: LPSPI4,
    #[doc = "ADC_ETC"]
    pub ADC_ETC: ADC_ETC,
    #[doc = "AOI"]
    pub AOI: AOI,
    #[doc = "XBARA"]
    pub XBARA: XBARA,
    #[doc = "XBARB"]
    pub XBARB: XBARB,
    #[doc = "ENC1"]
    pub ENC1: ENC1,
    #[doc = "ENC2"]
    pub ENC2: ENC2,
    #[doc = "PWM1"]
    pub PWM1: PWM1,
    #[doc = "PWM2"]
    pub PWM2: PWM2,
    #[doc = "BEE"]
    pub BEE: BEE,
    #[doc = "LPI2C1"]
    pub LPI2C1: LPI2C1,
    #[doc = "LPI2C2"]
    pub LPI2C2: LPI2C2,
    #[doc = "LPI2C3"]
    pub LPI2C3: LPI2C3,
    #[doc = "LPI2C4"]
    pub LPI2C4: LPI2C4,
    #[doc = "SYSTEM_CONTROL"]
    pub SYSTEM_CONTROL: SYSTEM_CONTROL,
    #[doc = "CM7_MCM"]
    pub CM7_MCM: CM7_MCM,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            AIPSTZ1: AIPSTZ1 {
                _marker: PhantomData,
            },
            AIPSTZ2: AIPSTZ2 {
                _marker: PhantomData,
            },
            AIPSTZ3: AIPSTZ3 {
                _marker: PhantomData,
            },
            AIPSTZ4: AIPSTZ4 {
                _marker: PhantomData,
            },
            DCDC: DCDC {
                _marker: PhantomData,
            },
            PIT: PIT {
                _marker: PhantomData,
            },
            CMP1: CMP1 {
                _marker: PhantomData,
            },
            CMP2: CMP2 {
                _marker: PhantomData,
            },
            CMP3: CMP3 {
                _marker: PhantomData,
            },
            CMP4: CMP4 {
                _marker: PhantomData,
            },
            IOMUXC_SNVS_GPR: IOMUXC_SNVS_GPR {
                _marker: PhantomData,
            },
            IOMUXC_SNVS: IOMUXC_SNVS {
                _marker: PhantomData,
            },
            IOMUXC_GPR: IOMUXC_GPR {
                _marker: PhantomData,
            },
            FLEXRAM: FLEXRAM {
                _marker: PhantomData,
            },
            EWM: EWM {
                _marker: PhantomData,
            },
            WDOG1: WDOG1 {
                _marker: PhantomData,
            },
            WDOG2: WDOG2 {
                _marker: PhantomData,
            },
            RTWDOG: RTWDOG {
                _marker: PhantomData,
            },
            ADC1: ADC1 {
                _marker: PhantomData,
            },
            ADC2: ADC2 {
                _marker: PhantomData,
            },
            TRNG: TRNG {
                _marker: PhantomData,
            },
            SNVS: SNVS {
                _marker: PhantomData,
            },
            CCM_ANALOG: CCM_ANALOG {
                _marker: PhantomData,
            },
            PMU: PMU {
                _marker: PhantomData,
            },
            TEMPMON: TEMPMON {
                _marker: PhantomData,
            },
            USB_ANALOG: USB_ANALOG {
                _marker: PhantomData,
            },
            XTALOSC24M: XTALOSC24M {
                _marker: PhantomData,
            },
            USBPHY: USBPHY {
                _marker: PhantomData,
            },
            CSU: CSU {
                _marker: PhantomData,
            },
            DMA0: DMA0 {
                _marker: PhantomData,
            },
            DMAMUX: DMAMUX {
                _marker: PhantomData,
            },
            GPC: GPC {
                _marker: PhantomData,
            },
            PGC: PGC {
                _marker: PhantomData,
            },
            SRC: SRC {
                _marker: PhantomData,
            },
            CCM: CCM {
                _marker: PhantomData,
            },
            LPUART1: LPUART1 {
                _marker: PhantomData,
            },
            LPUART2: LPUART2 {
                _marker: PhantomData,
            },
            LPUART3: LPUART3 {
                _marker: PhantomData,
            },
            LPUART4: LPUART4 {
                _marker: PhantomData,
            },
            LPUART5: LPUART5 {
                _marker: PhantomData,
            },
            LPUART6: LPUART6 {
                _marker: PhantomData,
            },
            LPUART7: LPUART7 {
                _marker: PhantomData,
            },
            LPUART8: LPUART8 {
                _marker: PhantomData,
            },
            FLEXIO1: FLEXIO1 {
                _marker: PhantomData,
            },
            GPIO1: GPIO1 {
                _marker: PhantomData,
            },
            GPIO5: GPIO5 {
                _marker: PhantomData,
            },
            GPIO2: GPIO2 {
                _marker: PhantomData,
            },
            GPIO3: GPIO3 {
                _marker: PhantomData,
            },
            CAN1: CAN1 {
                _marker: PhantomData,
            },
            CAN2: CAN2 {
                _marker: PhantomData,
            },
            TMR1: TMR1 {
                _marker: PhantomData,
            },
            TMR2: TMR2 {
                _marker: PhantomData,
            },
            GPT1: GPT1 {
                _marker: PhantomData,
            },
            GPT2: GPT2 {
                _marker: PhantomData,
            },
            OCOTP: OCOTP {
                _marker: PhantomData,
            },
            IOMUXC: IOMUXC {
                _marker: PhantomData,
            },
            KPP: KPP {
                _marker: PhantomData,
            },
            FLEXSPI: FLEXSPI {
                _marker: PhantomData,
            },
            USDHC1: USDHC1 {
                _marker: PhantomData,
            },
            USDHC2: USDHC2 {
                _marker: PhantomData,
            },
            ENET: ENET {
                _marker: PhantomData,
            },
            USB: USB {
                _marker: PhantomData,
            },
            USBNC: USBNC {
                _marker: PhantomData,
            },
            SEMC: SEMC {
                _marker: PhantomData,
            },
            DCP: DCP {
                _marker: PhantomData,
            },
            SPDIF: SPDIF {
                _marker: PhantomData,
            },
            SAI1: SAI1 {
                _marker: PhantomData,
            },
            SAI2: SAI2 {
                _marker: PhantomData,
            },
            SAI3: SAI3 {
                _marker: PhantomData,
            },
            LPSPI1: LPSPI1 {
                _marker: PhantomData,
            },
            LPSPI2: LPSPI2 {
                _marker: PhantomData,
            },
            LPSPI3: LPSPI3 {
                _marker: PhantomData,
            },
            LPSPI4: LPSPI4 {
                _marker: PhantomData,
            },
            ADC_ETC: ADC_ETC {
                _marker: PhantomData,
            },
            AOI: AOI {
                _marker: PhantomData,
            },
            XBARA: XBARA {
                _marker: PhantomData,
            },
            XBARB: XBARB {
                _marker: PhantomData,
            },
            ENC1: ENC1 {
                _marker: PhantomData,
            },
            ENC2: ENC2 {
                _marker: PhantomData,
            },
            PWM1: PWM1 {
                _marker: PhantomData,
            },
            PWM2: PWM2 {
                _marker: PhantomData,
            },
            BEE: BEE {
                _marker: PhantomData,
            },
            LPI2C1: LPI2C1 {
                _marker: PhantomData,
            },
            LPI2C2: LPI2C2 {
                _marker: PhantomData,
            },
            LPI2C3: LPI2C3 {
                _marker: PhantomData,
            },
            LPI2C4: LPI2C4 {
                _marker: PhantomData,
            },
            SYSTEM_CONTROL: SYSTEM_CONTROL {
                _marker: PhantomData,
            },
            CM7_MCM: CM7_MCM {
                _marker: PhantomData,
            },
        }
    }
}
